// @import '_variables';

/* 
** Output padding/margin style
** $type: 'padding/margin' 
*/
@mixin Around($type) {
  &0 {
    #{$type}: 0px !important;
  }

  &15 {
    #{$type}: 15px;
  }

  &25 {
    #{$type}: 25px;
  }

  &35 {
    #{$type}: 35px;
  }
}

/* 
** Output directional padding/margin style
** $type: 'padding/margin', $direction: 'top/bottom/left/right' 
*/

@mixin Direction($type, $direction) {
  &0 {
    #{$type}-#{$direction}: 0px !important;
  }

  &15 {
    #{$type}-#{$direction}: 15px;
  }

  &25 {
    #{$type}-#{$direction}: 25px;
  }

  &35 {
    #{$type}-#{$direction}: 35px;
  }
}

/* 
** Output axial padding/margin style
** $type: 'padding/margin', $direction: 'x/y' 
*/

@mixin Axis($type, $axis) {
  @if $axis == x {
    &0 {
      #{$type}: 0px !important;
    }

    &15 {
      #{$type}: 0px 15px;
    }
  
    &25 {
      #{$type}: 0px 25px;
    }
  
    &35 {
      #{$type}: 0px 35px;
    }
  }

  @if $axis == y {
    &0 {
      #{$type}: 0px !important;
    }

    &15 {
      #{$type}: 15px 0px;
    }
  
    &25 {
      #{$type}: 25px 0px;
    }
  
    &35 {
      #{$type}: 35px 0px;
    }
  }
}

/* 
  Margin-around
*/
.m- {
  @include Around(margin)
}

/* 
  Margin: Top, Bottom, Left, Right
*/
.mt- {
 @include Direction(margin, top)
}

.mb- {
  @include Direction(margin, bottom)
}

.ml- {
  @include Direction(margin, left)
}

.mr- {
  @include Direction(margin, right)
}

/* 
  Margin: X-Asix, Y-Axis
*/
.mx- {
  @include Axis(margin, x)
}

.my- {
  @include Axis(margin, y)
}


/* 
  Padding-around
*/
.p- {
  @include Around(padding)
}

/* 
  Padding: Top, Bottom, Left, Right
*/
.pt- {
  @include Direction(padding, top)
 }
 
.pb- {
  @include Direction(padding, bottom)
}

.pl- {
  @include Direction(padding, left)
}

.pr- {
  @include Direction(padding, right)
}
 
/* 
  Padding: X-Asix, Y-Axis
*/
.px- {
  @include Axis(padding, x)
}

.py- {
  @include Axis(padding, y)
}

/* 
Navbar Padding Fix
*/
.navbar-fix {
  padding-top: 50px;
}



/* 
** Positions
*/

// Absolute Position
.mt-layout-abs {
  position: absolute;
}
// Fixed Postion
.mt-layout-fixed {
  position: fixed;
}



/* 
** Layout
*/

%flexLayout {
  display: flex;
  flex-wrap: nowrap;
}

.mt-layout {
  
  &-row {
  @extend %flexLayout;
  flex-direction: row;

    &-wrap {
      @extend %flexLayout;
      flex-direction: row;
      flex-wrap: wrap;
    }
  }

  &-column {
  @extend %flexLayout;
  flex-direction: column;

    &-wrap {
      @extend %flexLayout;
      flex-direction: column;
      flex-wrap: wrap;
    }
  }
}

.mt-layout-row,
.mt-layout-column {

  //  alignment classes
  &.row-center {
    justify-content: center;
    align-items: center;
  }
  &.row-left {
    justify-content: flex-start;
  }
  &.row-right {
    justify-content: flex-end;
  }
  &.row-end {
    justify-content: space-between;
  }
}

/* 
** Full Screen
** Note: reuiqred absolute or fixed position
*/
.cover-screen {
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0px;
}



/* 
** Z-index shortcut
** @param $layers
** note: build z-main, z-shadow...
*/

@each $layer, $index in $layers {
  .z-#{$layer} {
    z-index: $index;
  }
}

/* 
** Z-index Numeric
** @param $layersNum
** note: build z-10, z-20...
*/

@each $layer, $index in $layersNum {
  .z-#{$layer} {
    z-index: $index;
  }
}






